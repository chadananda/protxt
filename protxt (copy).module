<?php


// create input filter that translates text
// provide XML-RPC way to load node without the filter



/**
 * Implementation of hook_help().
 */
function protxt_help($path, $arg) {
  switch ($path) {
    case 'admin/help#protxt':
      return t("Protext node text by randomly juggling sentences in HTML and then fixing with Javascript!");
  }
}


function protxt_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(
        0 => t('protxt - Synomizer'),
        1 => t('protxt - Sentence Juggler'),
        2 => t('protxt - Phrase Juggler'),
        3 => t('protxt - Pirate Speak'),
      );
    case 'description':
      return t('Protectx filters alter page text slightly (without changing meaning) to protect it from content thieves.. then fix the text with Javascript for humans!');
    case 'process': 
      global $node;
      switch ($delta) {
       case 0: return _protxt_filter_synomizer($text, $node->nid);
       case 1: return _protxt_filter_sentence_juggler($text, $node->nid);
       case 2: return _protxt_filter_phrase_juggler($text, $node->nid);
       case 3: return _protxt_filter_phrase_piratespeak($text, $node->nid);
      }
    default:  
      return $text;
  }
}

function protxt_menu() {
  $items = array();

  $items['protxt/%'] = array(
    'title' => 'Ajax Get Node Body',
    'page callback' => '_protxt_correct_node_body',
     'page arguments' => array(1),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );
 
  $items['admin/settings/protxt'] = array(
    'title' => t('Protxt Settings'),
    'description' => t('Protxt text protection settings'),
    'page callback' => 'drupal_get_form',
     'page arguments' => array('protxt_admin_settings_form', NULL),
    'access callback' => 'user_access',
     'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['node/%/protxt_filtered'] = array(
    'title' => t('Protxt Filtered'),
    'description' => t('Node Body after Protxt filters'),
    'page callback' => '_protxt_filtered_node_body',
     'page arguments' => array(1),
    'access callback' => 'user_access',
     'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 125,
  );
  $items['node/%/protxt_original'] = array(
    'title' => t('Protxt Original'),
    'description' => t('Original Text before Protxt protection'),
    'page callback' => '_protxt_original_node_body',
     'page arguments' => array(1),
    'access callback' => 'user_access',
     'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 126,
  ); 
  

  return $items;
}
 
function protxt_admin_settings_form() {
  $form['protxt_nodes'] = array(
      '#type' => 'textfield',
      '#title' => t('Article administrator email'),
      '#description' =>  t('Email to send notice when new articles are added from feed.'),
      '#required' => TRUE,
      '#default_value' => variable_get('isnare_administrator', variable_get('site_mail', '')),
  );

  // Toggle node display.
  $node_types = node_get_types('names');
  if ($node_types) {
      $form['protext_nodes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Protect nodes of type'),
        '#description' => t('This will apply Protxt text protection to these nodes.'),
      );
      foreach ($node_types as $type => $name) {
        $form['protext_nodes']["protxt_toggle_node_$type"] = array('#type' => 'checkbox', '#title' => check_plain($name),
          '#default_value' => $settings["protxt_toggle_node_$type"]);
      }
  }
 return system_settings_form($form);
}

function _protxt_filtered_node_body($nid){
 $cid = "protext_node_{$nid}";
 if($cached = cache_get($cid, 'cache_page')) return $cached;
 else {
  if (!($node = node_load($nid))) return FALSE;
  $node = node_prepare($node);
  $body = _protxt_filter_sentence_juggler($node->body, $nid);
  return '<h2>'. t('Protext Filtered Node Body') .'</h2>'. $body;
 }
}

function _protxt_original_node_body($nid) {
 //return "<h2> _protxt_original_node_body($nid)</h2>"; 
 $cid = "protext_node_{$nid}";
 if($cached = cache_get($cid, 'cache_page')) return $cached;
 else {
  if (!($node = node_load($nid))) return FALSE;
  $node = node_prepare($node);
  return '<h2>'. t('Unfiltered Node Body') .'</h2>'. $node->body;
 }  
}



function protxt_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
//  if ($node->type == 'isnare')
// $node->body = $op;
// return;

 switch ($op) {
   // case 'submit':
   // case 'insert':
   // case 'update':
    case 'alter': _protxt_modify_node_body($node); break;
  }

}

function  _protxt_modify_node_body(&$node) {
     $oldtext = $node->body;
     $juggled = _protxt_filter_sentence_juggler($node->body, $node->nid); 
     $newtext = "<div id='protext_{$node->nid}'>{$juggled}</div>";
     $enc_oldtext = chunk_split(base64_encode($oldtext), 100, "\\\r\n");
     drupal_add_js();
/*
$js = '  <script type="text/javascript">
// var bodytext = $(\'#protext_'.$node->nid.'\');
// bodytext.hide();
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var node_body = \''. $enc_oldtext .'\';

function decode64(input) {
     var output = "";
     var chr1, chr2, chr3 = "";
     var enc1, enc2, enc3, enc4 = "";
     var i = 0;

     // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
     var base64test = /[^A-Za-z0-9\+\/\=]/g;
     if (base64test.exec(input)) {
        alert("There were invalid base64 characters in the input text.\n" +
              "Expect errors in decoding.");
     }
     input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

     do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
           output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
           output = output + String.fromCharCode(chr3);
        }

        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";

     } while (i < input.length);

     return output;
}


$(document).ready(function() {
  node_body = "<h3>Hello World</h3>";
  node_body = decode64(node_body);
  node_body = "<textarea style=\'width:90%; height:500px\'>" + node_body + "</textarea>"; 
  bodytext.html(node_body);
  bodytext.show();
});
 

 </script>  ';
 */

 $node->body = $newtext.$js;

}


/*
 *
 *   
 *
 *
 */
function _protxt_filter_synomizer($text, $nid=0) {
  include_once(drupal_get_path('module', 'protxt') .'/dictionary.inc.php');
  //global $dic;
  //global $not_replace_list;
 
  $artarray=$article;
  $step1 = array("(", ")", "[", "]", "?", ".", ",", "|", "\$", "*", "+", "^","{", "}");
  $artarray=str_replace($step1," ",$artarray);
  $artarray=str_replace("  "," ",$artarray);
  $words_artarray = explode(" ",$artarray);

	if (sizeof($words_artarray)>0) {
		for($i=0;$i<sizeof($words_artarray);$i++) {
			$to_be_replaced=$words_artarray[$i];
			$to_be_replaced=str_replace(" ","",$to_be_replaced);

			$ignore="no";
			if($to_be_replaced!="") {
				$pos=strpos($not_replace_list, $to_be_replaced);
				if($pos>0) $ignore="yes"; 
		  }

			$to_be_replaced=" ".$to_be_replaced." ";
			$to_be_replaced_with=$dic[$to_be_replaced];
			if(($to_be_replaced!="")&&($to_be_replaced!=" ")&&($to_be_replaced_with!="")&&($ignore=="no")) {
				$article = str_replace($to_be_replaced,$to_be_replaced_with,$article);
		  }
	  }
  }
	 
	return $article;
}

function _protxt_filter_sentence_juggler($text, $nid=0) {
  $blocks = explode("</p>", $text);
  foreach ($blocks as $key=>$block){
   if (($start = strpos($block, '<p>')) != FALSE) {
     $start += strlen('<p>');
     $initial_text = substr($block, 0, $start);
     $text = substr($block, $start, strlen($block));
     $sentences = _protxt_sentence_split($text); 
     srand($nid); mt_srand($nid); // yeah, this no longer works reliably
     shuffle($sentences);   
     $blocks[$key] = $initial_text. implode(" ", $sentences); //'('.count($result).') - '. '<pre>'.print_r($sentences, true).'</pre><br><Br>'
   }
  }

  return implode ("</p>", $blocks);
}

function _protxt_filter_phrase_juggler($text, $nid=0) {
  include_once(drupal_get_path('module', 'protxt') .'/dictionary.inc.php');
  //global $dic;
  //global $not_replace_list;
 
  $artarray=$article;
  $step1 = array("(", ")", "[", "]", "?", ".", ",", "|", "\$", "*", "+", "^","{", "}");
  $artarray=str_replace($step1," ",$artarray);
  $artarray=str_replace("  "," ",$artarray);
  $words_artarray = explode(" ",$artarray);

	if (sizeof($words_artarray)>0) {
		for($i=0;$i<sizeof($words_artarray);$i++) {
			$to_be_replaced=$words_artarray[$i];
			$to_be_replaced=str_replace(" ","",$to_be_replaced);

			$ignore="no";
			if($to_be_replaced!="") {
				$pos=strpos($not_replace_list, $to_be_replaced);
				if($pos>0) $ignore="yes"; 
		  }

			$to_be_replaced=" ".$to_be_replaced." ";
			$to_be_replaced_with=$dic[$to_be_replaced];
			if(($to_be_replaced!="")&&($to_be_replaced!=" ")&&($to_be_replaced_with!="")&&($ignore=="no")) {
				$article = str_replace($to_be_replaced,$to_be_replaced_with,$article);
		  }
	  }
  }
	 
	return $article;
}

function _protxt_filter_phrase_piratespeak($text, $nid=0) {
   $patterns = array( 
        '%\bmy\b%' => 'me',
        '%\bboss\b%' => 'admiral',
        '%\bmanager\b%' => 'admiral',
        '%\b[Cc]aptain\b%' => "Cap'n",
        '%\bmyself\b%' => 'meself',
        '%\byour\b%' => 'yer',
        '%\byou\b%' => 'ye',
        '%\bfriend\b%' => 'matey',
        '%\bfriends\b%' => 'maties',
        '%\bco[-]?worker\b%' => 'shipmate',
        '%\bco[-]?workers\b%' => 'shipmates',
        '%\bpeople\b%' => 'scallywags',
        '%\bearlier\b%' => 'afore',
        '%\bold\b%' => 'auld',
        '%\bthe\b%' => "th'",
        '%\bof\b%' =>  "o'",
        "%\bdon't\b%" => "dern't",
        '%\bdo not\b%' => "dern't",
        '%\bnever\b%' => "no nay ne'er",
        '%\bever\b%' => "e'er",
        '%\bover\b%' => "o'er",
        '%\bYes\b%' => 'Aye',
        '%\bNo\b%' => 'Nay',
        '%\bYeah\b%' => 'Aye',
        '%\byeah\b%' => 'aye',
        '%\bare\b%' => 'be',
        '%\bDrupalists\b%' => 'Bucaneers',
        '%\bthere\b%' => 'thar',
        '%b\bnot\b%' => 'nay',
        '%\bdesign\b%' => 'bounty',
        '%\bonline\b%' => 'on the plank',
        '/and\b/' => "an'",
        '/ious\b/' => "i'us",
        "%\bdon't know\b%" => "dinna",
        "%\bdidn't know\b%" => "did nay know",
        "%\bhadn't\b%" => "ha'nae",
        "%\bdidn't\b%"=>  "di'nae",
        "%\bwasn't\b%" => "weren't",
        "%\bhaven't\b%" => "ha'nae",
        '%\bfor\b%' => 'fer',
        '%\bbetween\b%' => 'betwixt',
        '%\baround\b%' => "aroun'",
        '%\bto\b%' => "t'",
        "%\bit's\b%" => "'tis",
        '%\bwoman\b%' => 'wench',
        '%\bwomen\b%' => 'wenches',
        '%\blady\b%' => 'wench',
        '%\bwife\b%' => 'lady',
        '%\bgirl\b%' => 'lass',
        '%\bgirls\b%' => 'lassies',
        '%\bguy\b%' => 'lubber',
        '%\bman\b%' => 'lubber',
        '%\bfellow\b%' => 'lubber',
        '%\bdude\b%' => 'lubber',
        '%\bboy\b%' => 'lad',
        '%\bboys\b%' => 'laddies',
        '%\bchildren\b%' => 'little sandcrabs',
        '%\bkids\b%' => 'minnows',
        '%\bhim\b%' => 'that scurvey dog',
        '%\bher\b%' => 'that comely wench',
        '%\bhim\.\b%' => 'that drunken sailor',
        '%\bHe\b%' => 'The ornery cuss',
        '%\bShe\b%' => 'The winsome lass',
        "%\bhe's\b%" => 'he be',
        "%\bshe's\b%" => 'she be',
        '%\bwas\b%' => "were bein'",
        '%\bHey\b%' => 'Avast',
        '%\bher\.\b%' => 'that lovely lass',
        '%\bfood\b%' => 'chow',
        '%\bmoney\b%' => 'dubloons',
        '%\bdollars\b%' => 'pieces of eight',
        '%\bcents\b%' => 'shillings',
        '%\broad\b%' => 'sea',
        '%\broads\b%' => 'seas',
        '%\bstreet\b%' => 'river',
        '%\bstreets\b%' => 'rivers',
        '%\bhighway\b%' => 'ocean',
        '%\bhighways\b%' => 'oceans',
        '%\binterstate\b%' => 'high sea',
        '%\bprobably\b%' => 'likely',
        '%\bidea\b%' => 'notion',
        '%\bcar\b%' => 'boat',
        '%\bcars\b%' => 'boats',
        '%\btruck\b%' => 'schooner',
        '%\btrucks\b%' => 'schooners',
        '%\bSUV\b%' => 'ship',
        '%\bairplcaseane\b%' => 'flying machine',
        '%\bjet\b%' => 'flying machine',
        '%\bmachine\b%' => 'contraption',
        '%\bdriving\b%' => 'sailing',
        '%\bunderstand\b%' => 'reckon',
        '%\bdrive\b%' => 'sail',
        '%\bdied\b%' => 'snuffed it',
        '/ing\b/' => "in'",
        '/ings\b/' => "in's",
        // These next two do cool random substitutions.
        '/(\.\s)/e' => 'avast("$0",3)',
        '/([!\?]\s)/e' => 'avast("$0",2)', // Greater chance after exclamation.
        );
      foreach ($patterns as $pattern_search => $pattern_replace) {
        $text = preg_replace($pattern_search, $pattern_replace, $text);
      }
   return $text;
}


function _protxt_sentence_split($sentence_split) {
    $sentence_split = preg_replace(array('/[!]+/','/[?]+/','/[.]+/'),
                                   array('!','?','.'),$sentence_split);
    $sentences = preg_split("/(\!|\.|\?|\n)/", $sentence_split, -1, PREG_SPLIT_DELIM_CAPTURE);
    $i=1; while($i<=count($sentences))  { 
     if($sentence = trim(trim($sentences[$i-1]).trim($sentences[$i]))) $result[]=$sentence;
     $i+=2;
    }
    return $result;
}

