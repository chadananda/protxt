<?php


// create input filter that translates text
// provide XML-RPC way to load node without the filter

// TODO: add class selector instead of just ID
// TODO: get rid of settings form and just add collapsed fieldset to each content type
// TODO: add permissions access control



/**
 * Implementation of hook_help().
 */
function protxt_help($path, $arg) {
  switch ($path) {
    case 'admin/help#protxt':
      return t("Protext node text by randomly juggling sentences in HTML and then fixing with Javascript!");
  }
} 

function protxt_menu() {
  $items = array();
 
  $items['admin/settings/protxt'] = array(
    'title' => t('Protxt Settings'),
    'description' => t('Protxt text protection settings'),
    'page callback' => 'drupal_get_form',
     'page arguments' => array('protxt_admin_settings_form', NULL),
    'access callback' => 'user_access',
     'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  ); 

  return $items;
}
 
function protxt_admin_settings_form() {
  $form['protxt_nodes'] = array(
      '#type' => 'textfield',
      '#title' => t('Article administrator email'),
      '#description' =>  t('Email to send notice when new articles are added from feed.'),
      '#required' => TRUE,
      '#default_value' => variable_get('isnare_administrator', variable_get('site_mail', '')),
  );

  // Toggle node display.
  $node_types = node_get_types('names');
  if ($node_types) {
      $form['protext_nodes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Protect nodes of type'),
        '#description' => t('This will apply Protxt text protection to these nodes.'),
      );
      foreach ($node_types as $type => $name) {
        $form['protext_nodes'][$type] = array(
         '#type' => 'fieldset',
         '#title' => check_plain($name),
         '#collapsible' => TRUE,
         '#collapsed' => (! variable_get("protxt_toggle_node_$type", FALSE)),
        );
        $form['protext_nodes'][$type]["protxt_toggle_node_$type"] = array(
          '#type' => 'checkbox', '#title' => check_plain($name),
          '#default_value' => variable_get("protxt_toggle_node_$type", FALSE)
        );
        $form['protext_nodes'][$type]["protxt_node_body_id_$type"] = array(
          '#type' => 'textfield', '#title' => check_plain(t('CSS ID identifying body text of a "'). $name .'"'),
          '#default_value' => variable_get("protxt_node_body_id_$type", ''), '#cols' => 3,
        );
      }
  }
 return system_settings_form($form);
} 

function protxt_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  cache_clear_all("protxt_page_{$node->nid}", 'cache_page');
  switch ($op) {
    case 'delete': 
    case 'update':
      cache_clear_all("protxt_page_{$node->nid}", 'cache_page');
     break;
    case 'alter':
     if (variable_get("protxt_toggle_node_{$node->type}", FALSE)) { 
       $body_id = variable_get("protxt_node_body_id_{$node->type}", '');  
       if ($body = _protxt_modify_node_body_cached($node, $body_id)) $node->body = $body;
     }
     break;
  }
}

function  _protxtcharset_decode_utf_8($string) {
      /* Only do the slow convert if there are 8-bit characters */
    /* avoid using 0xA0 (\240) in ereg ranges. RH73 does not like that */
    if (! ereg("[\200-\237]", $string) and ! ereg("[\241-\377]", $string))
        return $string;

    // decode three byte unicode characters
    $string = preg_replace("/([\340-\357])([\200-\277])([\200-\277])/e",
    "'&#'.((ord('\\1')-224)*4096 + (ord('\\2')-128)*64 + (ord('\\3')-128)).';'",
    $string);

    // decode two byte unicode characters
    $string = preg_replace("/([\300-\337])([\200-\277])/e",
    "'&#'.((ord('\\1')-192)*64+(ord('\\2')-128)).';'",
    $string);

    return $string;
}

function  _protxt_modify_node_body_cached($node, $id='article_main') {
  global $user;
  if ($node->aid) $aid_display = "<div style='position:absolute; top:-5px; right:-5px; background: #FFFF99; border:1px dashed silver; color: navy; padding:5px; margin:-5px;'>aid: {$node->aid}</div>";
  if ($user->uid==1) $replace_verify_outline = " style='border:2px dashed silver; padding:0; margin:10px; position:relative;'"; // dash around corrected text when UID = 1 for verification purposes

 $cid = "protxt_page_{$node->nid}";
 if ($body = cache_get($cid, 'cache_page')) return $body->data;
 $body = _protxtcharset_decode_utf_8($node->body);
 $juggled_text = _protxt_filter_sentence_juggler($body, $node->nid);
 $juggled_text = "<div id='protxt_{$node->nid}' class='juggled'> {$juggled_text} </div>";
 $correct_text = "<div{$replace_verify_outline}>{$aid_display}". _protxt_innerHTML_byid($body, $id) ."</div>";
 //$correct_text = _protxt_innerHTML_byid($body, $id);
 $enc_correct_text = trim(chunk_split(base64_encode($correct_text), 200, "\n"));
 $enc_correct_text = explode("\n", $enc_correct_text);
 foreach ($enc_correct_text as $i=>$line) $enc_correct_text[$i] = '"'. $line .'"';
 $enc_correct_text = implode(" +\n", $enc_correct_text);
 drupal_add_js();

$js = "\n\n". '<script type="text/javascript">
var advert = '. $enc_correct_text .'; 
$(document).ready(function() {$("#'. $id .'").html(decode_ad(advert));});
function decode_ad(input){var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3="";var enc1,enc2,enc3,enc4="";var i=0;
 input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));
 enc4=keyStr.indexOf(input.charAt(i++));chr1=(enc1<<2)|(enc2>>4);chr2=((enc2&15)<<4)|(enc3>>2);chr3=((enc3&3)<<6)|enc4;output=output+String.fromCharCode(chr1);
 if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}chr1=chr2=chr3="";enc1=enc2=enc3=enc4=""}while(i<input.length);return output}
</script>  ' ."\n\n";

 $body = $juggled_text.$js;  
 cache_set($cid, $body, 'cache_page', strtotime('+2 month'));
 return $body;
}

function  _protxt_innerHTML_byid($html, $id) {
 $html = _filter_htmlcorrector($html);
 $dom = new DOMDocument(); 
 @$dom->loadHTML($html);
 $xpath = new DOMXPath($dom);
 // Put your XPath Query here
 $my_xpath_query = "//*[@id='{$id}']";

 $nodes = $xpath->query($my_xpath_query);
 if ($nodes->length) {
  $node = $nodes->item(0);
  // loop through elements adding them to a temp document and then export the document
  $children = $node->childNodes;
  foreach ($children as $child) {
    $tmp_doc = new DOMDocument();
    $tmp_doc->appendChild($tmp_doc->importNode($child, true));
    $innerHTML .= $tmp_doc->saveHTML();
   }
  return $innerHTML;
 }
}

function _protxt_filter_sentence_juggler($text, $nid=0) {
  $text = str_replace('<p>', "\n<p>", $text);
  $text = str_replace('</p>', "</p>\n", $text);
  $text = str_replace("\n\n\n", "\n", $text); $text = str_replace("\n\n", "\n", $text);
  
  $lines = explode("\n", $text);
  foreach ($lines as $line) {
   $line = trim($line);
   if ($line && (substr($line, 0, 3)=='<p>') && (substr($line, -4, 4)=='</p>')) {
     $line = trim(substr($line, 3, strlen($line) - 7));
     $prefix = '';
     // remove beginning if numbered list
     if (is_numeric(substr($line,0,1))) {
      $prefix = substr($line, 0, strpos($line, ' '));
      $line = trim(substr($line, strlen($prefix), strlen($line))); 
     }
     $line = _protxt_sentence_split($line);
     srand($nid); mt_srand($nid); // yeah, this no longer works reliably
     shuffle($line);
     $line = "\n<p>". $prefix.' '. implode(" ", $line) ."</p>\n";
   } 
   if (!empty($line)) $new[] = $line;
  }
  $text = implode("\n", $new);
  return $text;
}

function _protxt_sentence_split($sentence_split) {
    $sentence_split = preg_replace(array('/[!]+/','/[?]+/','/[.]+/'),
                                   array('!','?','.'),$sentence_split);
    $sentences = preg_split("/(\!|\.|\?|\n)/", $sentence_split, -1, PREG_SPLIT_DELIM_CAPTURE);
    $i=1; while($i<=count($sentences))  { 
     if($sentence = trim(trim($sentences[$i-1]).trim($sentences[$i]))) $result[]=$sentence;
     $i+=2;
    }
    return $result;
}



/*
function protxt_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(
        0 => t('protxt - Synomizer'),
        1 => t('protxt - Sentence Juggler'),
        2 => t('protxt - Phrase Juggler'),
        3 => t('protxt - Pirate Speak'),
      );
    case 'description':
      return t('Protectx filters alter page text slightly (without changing meaning) to protect it from content thieves.. then fix the text with Javascript for humans!');
    case 'process':
      global $node;
      switch ($delta) {
       case 0: return _protxt_filter_synomizer($text, $node->nid);
       case 1: return _protxt_filter_sentence_juggler($text, $node->nid);
       case 2: return _protxt_filter_phrase_juggler($text, $node->nid);
       case 3: return _protxt_filter_phrase_piratespeak($text, $node->nid);
      }
    default:
      return $text;
  }
}

function _protxt_filter_synomizer($text, $nid=0) {
  include_once(drupal_get_path('module', 'protxt') .'/dictionary.inc.php');
  //global $dic;
  //global $not_replace_list;

  $artarray=$article;
  $step1 = array("(", ")", "[", "]", "?", ".", ",", "|", "\$", "*", "+", "^","{", "}");
  $artarray=str_replace($step1," ",$artarray);
  $artarray=str_replace("  "," ",$artarray);
  $words_artarray = explode(" ",$artarray);

	if (sizeof($words_artarray)>0) {
		for($i=0;$i<sizeof($words_artarray);$i++) {
			$to_be_replaced=$words_artarray[$i];
			$to_be_replaced=str_replace(" ","",$to_be_replaced);

			$ignore="no";
			if($to_be_replaced!="") {
				$pos=strpos($not_replace_list, $to_be_replaced);
				if($pos>0) $ignore="yes";
		  }

			$to_be_replaced=" ".$to_be_replaced." ";
			$to_be_replaced_with=$dic[$to_be_replaced];
			if(($to_be_replaced!="")&&($to_be_replaced!=" ")&&($to_be_replaced_with!="")&&($ignore=="no")) {
				$article = str_replace($to_be_replaced,$to_be_replaced_with,$article);
		  }
	  }
  }

	return $article;
}


function _protxt_html_strip_js($html){
 return preg_replace('#<script[^>]*>.*?</script>#is','',$html);
}

function _protxt_strip_msword_utf8($text) {
  $old=$text;
  $find[] = 'â€œ';  // left side double smart quote
  $find[] = 'â€'. chr(157);  // right side double smart quote
  $find[] = 'â€˜';  // left side single smart quote
  $find[] = 'â€™';  // right side single smart quote
  $find[] = 'â€¦';  // elipsis
  $find[] = 'â€”';  // em dash
  $find[] = 'â€“';  // en dash

  $find[] = '“';  // left side double smart quote
  $find[] = '”'. chr(157);  // right side double smart quote
  $find[] = '‘';  // left side single smart quote
  $find[] = '’';  // right side single smart quote
  $find[] = 'â€¦';  // elipsis
  $find[] = '–';  // em dash
  $find[] = 'â€“';  // en dash
  

  $replace[] = '"';
  $replace[] = '"';
  $replace[] = "'";
  $replace[] = "'";
  $replace[] = "...";
  $replace[] = "-";
  $replace[] = "-";

  $replace[] = '"';
  $replace[] = '"';
  $replace[] = "'";
  $replace[] = "'";
  $replace[] = "...";
  $replace[] = "-";
  $replace[] = "-";

  $text = str_replace($find, $replace, $text);

  if ($text === $old) drupal_set_message("No changes made to text in _protxt_strip_msword_utf8");
 return $text;
}


function _protxt_filtered_node_body($nid){
  $node = node_load($nid);
  $node = node_prepare($node);
  $body = _protxt_filter_sentence_juggler($node->body, $nid);
  return '<h2>'. t('Protext Juggled Node Body') .'</h2>'. $body . "<textarea style='width:90%; height:500px;'>$body</textarea>";
}

function _protxt_original_node_body($nid) {
 //return "<h2> _protxt_original_node_body($nid)</h2>";
 $cid = "protext_node_{$nid}";
 if($cached = cache_get($cid, 'cache_page')) return $cached;
 else {
  if (!($node = node_load($nid))) return FALSE;
  $node = node_prepare($node);
  return '<h2>'. t('Unfiltered Node Body') .'</h2>'. $node->body;
 }
}
 *
function _protxt_filter_phrase_juggler($text, $nid=0) {
  include_once(drupal_get_path('module', 'protxt') .'/dictionary.inc.php');
  //global $dic;
  //global $not_replace_list;
 
  $artarray=$article;
  $step1 = array("(", ")", "[", "]", "?", ".", ",", "|", "\$", "*", "+", "^","{", "}");
  $artarray=str_replace($step1," ",$artarray);
  $artarray=str_replace("  "," ",$artarray);
  $words_artarray = explode(" ",$artarray);

	if (sizeof($words_artarray)>0) {
		for($i=0;$i<sizeof($words_artarray);$i++) {
			$to_be_replaced=$words_artarray[$i];
			$to_be_replaced=str_replace(" ","",$to_be_replaced);

			$ignore="no";
			if($to_be_replaced!="") {
				$pos=strpos($not_replace_list, $to_be_replaced);
				if($pos>0) $ignore="yes"; 
		  }

			$to_be_replaced=" ".$to_be_replaced." ";
			$to_be_replaced_with=$dic[$to_be_replaced];
			if(($to_be_replaced!="")&&($to_be_replaced!=" ")&&($to_be_replaced_with!="")&&($ignore=="no")) {
				$article = str_replace($to_be_replaced,$to_be_replaced_with,$article);
		  }
	  }
  }
	 
	return $article;
}
 

function _protxt_filter_phrase_piratespeak($text, $nid=0) {
   $patterns = array( 
        '%\bmy\b%' => 'me',
        '%\bboss\b%' => 'admiral',
        '%\bmanager\b%' => 'admiral',
        '%\b[Cc]aptain\b%' => "Cap'n",
        '%\bmyself\b%' => 'meself',
        '%\byour\b%' => 'yer',
        '%\byou\b%' => 'ye',
        '%\bfriend\b%' => 'matey',
        '%\bfriends\b%' => 'maties',
        '%\bco[-]?worker\b%' => 'shipmate',
        '%\bco[-]?workers\b%' => 'shipmates',
        '%\bpeople\b%' => 'scallywags',
        '%\bearlier\b%' => 'afore',
        '%\bold\b%' => 'auld',
        '%\bthe\b%' => "th'",
        '%\bof\b%' =>  "o'",
        "%\bdon't\b%" => "dern't",
        '%\bdo not\b%' => "dern't",
        '%\bnever\b%' => "no nay ne'er",
        '%\bever\b%' => "e'er",
        '%\bover\b%' => "o'er",
        '%\bYes\b%' => 'Aye',
        '%\bNo\b%' => 'Nay',
        '%\bYeah\b%' => 'Aye',
        '%\byeah\b%' => 'aye',
        '%\bare\b%' => 'be',
        '%\bDrupalists\b%' => 'Bucaneers',
        '%\bthere\b%' => 'thar',
        '%b\bnot\b%' => 'nay',
        '%\bdesign\b%' => 'bounty',
        '%\bonline\b%' => 'on the plank',
        '/and\b/' => "an'",
        '/ious\b/' => "i'us",
        "%\bdon't know\b%" => "dinna",
        "%\bdidn't know\b%" => "did nay know",
        "%\bhadn't\b%" => "ha'nae",
        "%\bdidn't\b%"=>  "di'nae",
        "%\bwasn't\b%" => "weren't",
        "%\bhaven't\b%" => "ha'nae",
        '%\bfor\b%' => 'fer',
        '%\bbetween\b%' => 'betwixt',
        '%\baround\b%' => "aroun'",
        '%\bto\b%' => "t'",
        "%\bit's\b%" => "'tis",
        '%\bwoman\b%' => 'wench',
        '%\bwomen\b%' => 'wenches',
        '%\blady\b%' => 'wench',
        '%\bwife\b%' => 'lady',
        '%\bgirl\b%' => 'lass',
        '%\bgirls\b%' => 'lassies',
        '%\bguy\b%' => 'lubber',
        '%\bman\b%' => 'lubber',
        '%\bfellow\b%' => 'lubber',
        '%\bdude\b%' => 'lubber',
        '%\bboy\b%' => 'lad',
        '%\bboys\b%' => 'laddies',
        '%\bchildren\b%' => 'little sandcrabs',
        '%\bkids\b%' => 'minnows',
        '%\bhim\b%' => 'that scurvey dog',
        '%\bher\b%' => 'that comely wench',
        '%\bhim\.\b%' => 'that drunken sailor',
        '%\bHe\b%' => 'The ornery cuss',
        '%\bShe\b%' => 'The winsome lass',
        "%\bhe's\b%" => 'he be',
        "%\bshe's\b%" => 'she be',
        '%\bwas\b%' => "were bein'",
        '%\bHey\b%' => 'Avast',
        '%\bher\.\b%' => 'that lovely lass',
        '%\bfood\b%' => 'chow',
        '%\bmoney\b%' => 'dubloons',
        '%\bdollars\b%' => 'pieces of eight',
        '%\bcents\b%' => 'shillings',
        '%\broad\b%' => 'sea',
        '%\broads\b%' => 'seas',
        '%\bstreet\b%' => 'river',
        '%\bstreets\b%' => 'rivers',
        '%\bhighway\b%' => 'ocean',
        '%\bhighways\b%' => 'oceans',
        '%\binterstate\b%' => 'high sea',
        '%\bprobably\b%' => 'likely',
        '%\bidea\b%' => 'notion',
        '%\bcar\b%' => 'boat',
        '%\bcars\b%' => 'boats',
        '%\btruck\b%' => 'schooner',
        '%\btrucks\b%' => 'schooners',
        '%\bSUV\b%' => 'ship',
        '%\bairplcaseane\b%' => 'flying machine',
        '%\bjet\b%' => 'flying machine',
        '%\bmachine\b%' => 'contraption',
        '%\bdriving\b%' => 'sailing',
        '%\bunderstand\b%' => 'reckon',
        '%\bdrive\b%' => 'sail',
        '%\bdied\b%' => 'snuffed it',
        '/ing\b/' => "in'",
        '/ings\b/' => "in's",
        // These next two do cool random substitutions.
        '/(\.\s)/e' => 'avast("$0",3)',
        '/([!\?]\s)/e' => 'avast("$0",2)', // Greater chance after exclamation.
        );
      foreach ($patterns as $pattern_search => $pattern_replace) {
        $text = preg_replace($pattern_search, $pattern_replace, $text);
      }
   return $text;
}
* 
 */